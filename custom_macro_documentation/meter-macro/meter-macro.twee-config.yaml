sugarcube-2:
  macros:
    newmeter:
      name: newmeter
      container: true
      children: 
        - colors, sizing, animation, label
      description: |-
        ```
        <<newmeter name [value]>>
            ... optional child tags (see below) ...
        <</newmeter>>
        ```

        The `<<newmeter>>` macro can be used to create a new meter instance. You must provide a name for the meter, in quotes, and can optionally pass a starting value (between `0` and `1`, inclusive) for the meter. You can configure a number of other meter options using the optional child tags `<<colors>>`, `<<sizing>>`, `<<animation>>`, and `<<label>>`. You do not have to include any of the child tags.

        Each `<<newmeter>>` macro call defines a set of attributes that the meter will use, and allows the meter system to reference and alter the meter's value and animate it. **Each meter profile should be unique on the page**; if you want to create a health bar meter for both enemy health and player health and the configurations are largely the same, for example, you will still need to create two different meters via the `<<newmeter>>` macro to show them on the same passage / page.

        > [!DANGER]
        > You should define your meters before using them, and you should **always** do so in your `StoryInit` special passage. Meters are **not** stateful, thus you *must* to define them here (or in your Story JavaScript via the API) or they won't work across browser refreshes and saved games. In fact, failing to use the `<<newmeter>>` macro before the story begins will raise an error.

        > [!WARNING]
        > Any other code or text in the `<<newmeter>>` macro, other than its child tags, will have no effect, and will simply be discarded.

        **Arguments**:

        - `name`: a string name to save the meter profile to.   
        - `value`: (optional) a value for the meter to start at, must be a number between `0` and `1` (inclusive). Defaults to `1`.

        **More Examples**

        ```
        /* setting up a meter for player health */
        <<newmeter 'healthBar'>>
            <<animation 300ms>>
            <<colors 'yellow' 'red' 'black'>>
            <<label '$health' 'black' center>>
        <</newmeter>>

        /* setting up an experience bar */
        <<newmeter 'xpBar' 0>>
            <<animation false>>
            <<sizing '100%'>>
        <</newmeter>>

        /* setting up a timer meter */
        <<newmeter 'timer' 0>>
            <<animation 10s linear>>
        <</newmeter>>
        ```
      parameters:
        - text |+ number

    colors:
      name: colors
      parents: newmeter
      description: |-
        **Syntax**: 
        ```
        <<newmeter ...>>
            <<colors full [empty] [backing]>>
        <</newmeter>>
        ```

        The `<<colors>>` child tag can be used to configure the color scheme of the meter, and should be valid CSS color values. If only the `full` color is provided, or if `full` and `empty` are the same, the meter will appear as a single color, regardless of its value. On the other hand, if both a `full` and `empty` value are provided, the meter will blend the colors as its value changes. The `backing` argument controls the color for the empty portions outside the meter.

        **Arguments**:

        - `full`: the color of the meter itself. If an `empty` value is also provided, this represents the color the meter should be when completely full. Accepts any valid CSS color value.  
        - `empty`: (optional) the color the meter should be when completely empty (it won't be visible, obviously, but this color is blended with full according to the value of the meter). Accepts any valid CSS color value.  
        - `backing`: (optional) the color of the empty portions outside the meter. Accepts any valid CSS color value.
      parameters:
        - text |+ text |+ text
    sizing:
      name: sizing
      parents: newmeter
      description: |-
        **Syntax**: 
        ```
        <<newmeter ...>>
            <<sizing width [height]>>
        <</newmeter>>
        ```

        The `<<sizing>>` child tag can be used to determine the width and height of the meter. These values can be in any valid CSS size units, like `px`, `em`, `%`, `vw`, etc.

        **Arguments**:

        - `width`: the width you want the meter to be. Can be any valid CSS size value.  
        - `height`: (optional) the height you want the meter to be. Can be any valid CSS size value.
      parameters:
        - text |+ text
    animation:
      name: animation
      parents: newmeter
      description: |-
        **Syntax**: 
        ```
        <<newmeter ...>>
            <<animation timeOrFalse [easing]>>
        <</newmeter>>
        ```

        The `<<animation>>` child tag can be used to configure the timing and easing of meter animations for whenever meters are updated. By default, the animation lasts `400ms` and is eased with jQuery's "swing" easing.

        **Arguments**:

        - `timeOrFalse`: assign to a valid CSS time (e.g. `250ms` or `1s`) or `false` to shut off the animations.  
        - `easing`: (optional) the type of easing to apply, must be either the keyword `swing` or `linear`.
      parameters:
        - text |+ 'swing'|'linear'
    label:
      name: label
      parents: newmeter
      description: |-
        **Syntax**: 
        ```
        <<newmeter ...>>
            <<label labelText [textColor] [alignment]>>
        <</newmeter>>
        ```

        The `<<label>>` child tag can be used to configure label for your meter which can include TwineScript values, like `$health`. The label is always centred vertically, but you may align it horizontally. The label's font size is determined by the size of the meter. If the meter is too small, the label's font will be scaled down to fit, otherwise it will default to the font size of its most immediate parent. If you want to change the font size of the meter, wrap it in another element with the desired `font-size` style.

        > [!TIP]
        > Any time a meter is animated, the string content of the `labelText` is reprocessed, meaning variables and the like will be dynamically updated.

        **Arguments**:

        - `labelText`: the text of the label. Can include TwineScript; eg `"HP: $health"` is a valid value, and the variable will be parsed and its value will be interpolated.  
        - `textColor`: (optional) the color of the text label text, which will be displayed inside the meter. Accepts any valid CSS color value.  
        - `alignment`: (optional) can be any one of the keywords `center`, `right`, or `left`.
      parameters:
        - text |+ text |+ 'center'|'right'|'left'

    showmeter:
      name: showmeter
      description: |-
        **Syntax**: `<<showmeter name [value]>>`

        Renders the indicated meter into the passage, optionally setting the value. If you set the value, the meter will animate to that value after rendering.

        **Arguments**:

        - `name`: the name of a Meter created via the `Meter` API or the `<<newmeter>>` macro.  
        - `value`: (optional) a value to set the meter to, must be a number between `0` and `1` (inclusive).

        **Usage**:
        ```
        /* render the player's health bar */
        <<showmeter 'healthBar' `$health / $maxHealth`>>

        /* render the experience meter */
        <<set _xp to $exp / $neededForNextLevel>>
        <<showmeter 'xpBar' _xp>>

        /* create a timer meter */
        Given the following in StoryInit:
        <<newmeter '_tenSeconds' 0>>
            <<animation 10s linear>>
        <</newmeter>>

        In passage:
        You have ten seconds until the bomb explodes...

        <<showmeter '_tenSeconds' 1>>

        <<timed 10s>>BOOM!<</timed>>
        ```
      parameters:
        - text |+ number
    updatemeter:
      name: updatemeter
      description: |-
        **Syntax**: `<<updatemeter name value>>`

        Changes the value of a meter; if the meter is on the page, it will be automatically changed, with an animation, depending on how the meter was set up

        **Arguments**:

        - `name`: the name of a Meter created via the `Meter` API or the `<<newmeter>>` macro.  
        - `value`: (optional) a value to set the meter to, must be a number between `0` and `1` (inclusive).

        **Usage**:
        ```
        Given the following in StoryInit:
        <<newmeter 'healthBar'>><<label '$health'>><</newmeter>>
        <<newmeter 'xpBar'>><</newmeter>>

        /* change the player's health */
        <<set $health to 23, $maxHealth to 130>>\
        <<showmeter 'healthBar' `$health / $maxHealth`>>

        <<link 'take a potion'>>
            <<set $health to Math.clamp($health + random(20, 35), 0, $maxHealth)>>
            <<updatemeter 'healthBar' `$health / $maxHealth`>>
        <</link>>

        <<link 'take damage'>>
            <<set $health to Math.clamp($health - random(10, 25), 0, $maxHealth)>>
            <<updatemeter 'healthBar' `$health / $maxHealth`>>
        <</link>>
            

        /* gain some experience */
        <<showmeter 'xpBar'>>

        You earned 100xp!
        <<set $xp += 100>>
        <<set _xp to $xp / $neededForNextLevel>>
        <<updatemeter 'xpBar' _xp>>
        ```
      parameters:
        - text &+ number